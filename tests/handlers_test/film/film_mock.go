// Code generated by MockGen. DO NOT EDIT.
// Source: film_handlers.go

// Package film is a generated GoMock package.
package film

import (
	actor "filmoteka/internal/actor"
	"filmoteka/internal/film"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// ActorsListWithFilms mocks base method.
func (m *MockStorage) ActorsListWithFilms() (map[actor.Actor][]film.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActorsListWithFilms")
	ret0, _ := ret[0].(map[actor.Actor][]film.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActorsListWithFilms indicates an expected call of ActorsListWithFilms.
func (mr *MockStorageMockRecorder) ActorsListWithFilms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActorsListWithFilms", reflect.TypeOf((*MockStorage)(nil).ActorsListWithFilms))
}

// Add mocks base method.
func (m *MockStorage) Add(film *film.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", film)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockStorageMockRecorder) Add(film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStorage)(nil).Add), film)
}

// Delete mocks base method.
func (m *MockStorage) Delete(filmId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", filmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageMockRecorder) Delete(filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage)(nil).Delete), filmId)
}

// FindFilms mocks base method.
func (m *MockStorage) FindFilms(toFind string) ([]film.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFilms", toFind)
	ret0, _ := ret[0].([]film.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFilms indicates an expected call of FindFilms.
func (mr *MockStorageMockRecorder) FindFilms(toFind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilms", reflect.TypeOf((*MockStorage)(nil).FindFilms), toFind)
}

// GetAllFilms mocks base method.
func (m *MockStorage) GetAllFilms(sortCol string) ([]film.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFilms", sortCol)
	ret0, _ := ret[0].([]film.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilms indicates an expected call of GetAllFilms.
func (mr *MockStorageMockRecorder) GetAllFilms(sortCol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilms", reflect.TypeOf((*MockStorage)(nil).GetAllFilms), sortCol)
}

// GetFilmId mocks base method.
func (m *MockStorage) GetFilmId(film *film.Film) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmId", film)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmId indicates an expected call of GetFilmId.
func (mr *MockStorageMockRecorder) GetFilmId(film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmId", reflect.TypeOf((*MockStorage)(nil).GetFilmId), film)
}

// Update mocks base method.
func (m *MockStorage) Update(filmId int64, newFilm *film.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", filmId, newFilm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStorageMockRecorder) Update(filmId, newFilm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorage)(nil).Update), filmId, newFilm)
}
